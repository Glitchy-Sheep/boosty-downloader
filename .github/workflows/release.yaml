name: release

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PACKAGE_NAME: "boosty-downloader"
  OWNER: "Glitchy-Sheep"

jobs:
  extract_base_project_version:
    name: "üìã Extract pyproject.toml version from main"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      # Ensure that we are on the main branch to get latest stable version
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Extract base version
        id: extract_version
        run: |
          VERSION=$(poetry version --short)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  extract_pushed_version:
    name: "üì¶ Extract pushed pyproject.toml version"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # —á—Ç–æ–±—ã poetry –º–æ–≥–ª–∞ —á–∏—Ç–∞—Ç—å pyproject.toml –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Extract pushed version
        id: extract_version
        run: |
          VERSION=$(poetry version --short)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"



  # Check if new version is greater than the latest version on PyPI
  check_pypi:
    name: "üîç Validate version against PyPI"
    needs: extract_pushed_version 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ü©∫ Check PyPi release version compatibility 
        run: |
          echo "Checking package: $PACKAGE_NAME"
          echo "Current version: $CURRENT_VERSION"

          PACKAGE_NAME="${{ env.PACKAGE_NAME }}"
          CURRENT_VERSION="${{ needs.extract_pushed_version.outputs.version }}"

          response=$(curl -s "https://pypi.org/pypi/$PACKAGE_NAME/json" || echo "{}")

          pypi_version=$(echo "$response" | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last // empty")

          if [ -z "$pypi_version" ] || [ "$pypi_version" = "null" ]; then
            echo "Package not found on PyPI or no releases available."
            pypi_version="0.0.0"
          fi

          echo "Latest version on PyPI: $pypi_version"
          echo "pypi_version=$pypi_version" >> "$GITHUB_OUTPUT"

          # Compare versions using sort -rV
          if [ "$CURRENT_VERSION" = "$pypi_version" ]; then
            echo "‚ùå Current version equals PyPI version ($CURRENT_VERSION)"
            echo "is_newer=false" >> "$GITHUB_OUTPUT"
            exit 1
          elif [ "$(printf '%s\n' "$pypi_version" "$CURRENT_VERSION" | sort -rV | head -n 1)" = "$CURRENT_VERSION" ]; then
            echo "‚úÖ Current version ($CURRENT_VERSION) is newer than PyPI version ($pypi_version)"
            echo "is_newer=true" >> "$GITHUB_OUTPUT"
          else
            echo "‚ùå Current version ($CURRENT_VERSION) is older than PyPI version ($pypi_version)"
            echo "is_newer=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi


  # Install dependencies, run tests, and build distribution packages
  setup_and_build:
    name: "üî® Build distribution packages"
    needs: [extract_pushed_version, extract_base_project_version, check_pypi]
    runs-on: ubuntu-latest
    steps:
      # Checkout the code on MAIN to get current latest stable version
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Install dependencies
        run: make deps
        timeout-minutes: 10

      - name: Build source and wheel distribution
        run: make build 

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  create_tag:
    name: "üè∑Ô∏è Create release tag"
    needs: [extract_pushed_version, setup_and_build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Create and push tag
        run: |
          VERSION=${{ needs.extract_pushed_version.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"


  pypi_publish:
    name: "üì¶ Upload release to PyPI"
    needs: [setup_and_build, extract_pushed_version, create_tag]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1


  github_release:
    name: "üöÄ Create GitHub Release"
    needs: [setup_and_build, extract_pushed_version, create_tag]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION=${{ needs.extract_pushed_version.outputs.version }}
          gh release create "v$VERSION" dist/* --title "v$VERSION" --generate-notes

