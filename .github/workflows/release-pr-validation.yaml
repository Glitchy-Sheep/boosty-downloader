# This workflow runs only for dev -> main PRs to ensure that:
#  - CHANGELOG updated 
#  - pyproject.toml version updated
#  - Version is higher than the one on PyPI
name: 🔍 Release PR Validation (version checks)

on:
  pull_request:
    branches:
      - main

env:
  PACKAGE_NAME: "boosty-downloader"
      
jobs:
  # About Inter-step Communication:
  #    Steps share data (versions) using GitHub Actions outputs mechanism:
  #    
  #    Creating output:     echo "key=value" >> "$GITHUB_OUTPUT"
  #    Using output:        ${{ steps.STEP_ID.outputs.key }}
  #
  version-validation:
    name: 📋 Version Validation (Main Branch PRs)
    runs-on: ubuntu-latest
    # if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # ref: ${{ github.event.pull_request.head.sha }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Install Poetry if missing
        uses: snok/install-poetry@v1
        with:
          version: 'latest'
      
      - name: Get project versions (base and head)
        id: get_poetry_versions
        run: |
          HEAD_VERSION=$(poetry version --short)
          echo "head_version=$HEAD_VERSION" >> "$GITHUB_OUTPUT"
          echo "Current version: $HEAD_VERSION at $(git rev-parse --short HEAD)"

          git switch main
          BASE_VERSION=$(poetry version --short)
          echo "base_version=$BASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "Base version: $BASE_VERSION at $(git rev-parse --short HEAD)"

          git switch - -d

      
      - name: ✅ Validate version bump in pyproject.toml
        run: |
          CURRENT_VERSION="${{ steps.get_poetry_versions.outputs.head_version }}"
          BASE_VERSION="${{ steps.get_poetry_versions.outputs.base_version }}"

          if [ "$CURRENT_VERSION" == "$BASE_VERSION" ]; then
            echo "❌ Version not updated! Please update version in pyproject.toml"
            echo "Current: $CURRENT_VERSION"
            echo "Base: $BASE_VERSION"
            exit 1
          fi
          
          if [ "$(printf '%s\n' "$BASE_VERSION" "$CURRENT_VERSION" | sort -rV | head -n 1)" != "$CURRENT_VERSION" ]; then
            echo "❌ Version should be higher than base version!"
            echo "Current: $CURRENT_VERSION"
            echo "Base: $BASE_VERSION"
            exit 1
          fi
          
          echo "✅ Version correctly updated: $BASE_VERSION → $CURRENT_VERSION"

      - name: 📝 Check for version in CHANGELOG.md
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "❌ CHANGELOG.md not found! Please create it."
            exit 1
          fi
          VERSION="${{ steps.get_poetry_versions.outputs.head_version }}"
          if ! grep -q "$VERSION" CHANGELOG.md; then
            echo "at $(git rev-parse --short HEAD)"
            echo "❌ Version $VERSION not found in CHANGELOG.md"
            echo "Please add changelog entry for version $VERSION"
            exit 1
          fi
          echo "✅ Version $VERSION found in CHANGELOG.md"

      - name: 🩺 Check PyPi release version compatibility 
        run: |
          echo "Checking package: $PACKAGE_NAME"
          echo "Current version: $CURRENT_VERSION"

          PACKAGE_NAME="${{ env.PACKAGE_NAME }}"
          CURRENT_VERSION="${{ steps.get_poetry_versions.outputs.head_version }}"

          response=$(curl -s "https://pypi.org/pypi/$PACKAGE_NAME/json" || echo "{}")

          pypi_version=$(echo "$response" | jq --raw-output "select(.releases != null) | .releases | keys_unsorted | last // empty")

          if [ -z "$pypi_version" ] || [ "$pypi_version" = "null" ]; then
            echo "Package not found on PyPI or no releases available."
            pypi_version="0.0.0"
          fi

          echo "Latest version on PyPI: $pypi_version"
          echo "pypi_version=$pypi_version" >> "$GITHUB_OUTPUT"

          # Compare versions using sort -rV
          if [ "$CURRENT_VERSION" = "$pypi_version" ]; then
            echo "❌ Current version equals PyPI version ($CURRENT_VERSION)"
            echo "is_newer=false" >> "$GITHUB_OUTPUT"
            exit 1
          elif [ "$(printf '%s\n' "$pypi_version" "$CURRENT_VERSION" | sort -rV | head -n 1)" = "$CURRENT_VERSION" ]; then
            echo "✅ Current version ($CURRENT_VERSION) is newer than PyPI version ($pypi_version)"
            echo "is_newer=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Current version ($CURRENT_VERSION) is older than PyPI version ($pypi_version)"
            echo "is_newer=false" >> "$GITHUB_OUTPUT"
            exit 1
          fi
